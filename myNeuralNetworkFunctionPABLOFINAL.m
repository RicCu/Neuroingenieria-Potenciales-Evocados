function [Y,Xf,Af] = myNeuralNetworkFunctionPABLOFINAL(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 24-Nov-2017 03:54:50.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0.11305;0.090257;0.12855];
x1_step1_gain = [3.95342861096286;4.27640089547835;10.2014792144861];
x1_step1_ymin = -1;

% Layer 1
b1 = [-3.7504489570572010493;2.998159543211554201;2.5019434182236879316;1.968756385881085702;-1.7517981087689178388;1.3763046031809293979;-0.44506813744061612947;0.075851347187857506849;-0.46208608070667883672;-0.98309245611020878997;-1.2415100719689324826;-1.9726478781709704258;-2.3556653194721031142;2.8347273875649450225;-3.4607890193436361415];
IW1_1 = [0.53577198625673050358 -3.131037390363095696 0.37892521428290121266;-1.1867444534496660591 1.8674312906231207432 2.5069180803332602459;-3.1668998444327041142 -1.1721543625441759318 -0.57036943987740662543;-3.1295380584425100956 0.86107211298889996254 -0.9711829496807207196;1.3168843993192584918 -2.0423070464046033656 2.259037810970501603;-0.60734610136382194412 3.0730915784901324805 1.0719940822832965122;2.8769304518627318856 1.8771764372755905814 0.18413354469939002822;-2.438898220238021608 -1.7635990025918080182 1.6896435894783252696;-1.7603091149433500728 -2.0422934593244734813 2.1289215421398508532;-2.0197305528414752906 1.5538698147913372338 2.343517077153278283;-2.2202915642203073787 2.6379015886977450478 0.86778844976622704355;-2.4705426912179575538 -0.59380437761039983613 -2.3365977113933324993;-3.0470277308039661612 0.80129513888560910395 1.6082492322587711442;3.0021231205975609235 -1.1076056154422651012 1.5923855083286915235;-2.4179726306578048778 2.4182146010359568677 -0.43601412219744534182];

% Layer 2
b2 = [-0.17946389646617330604;-0.3832042512806063117];
LW2_1 = [-0.52689917219241400037 -0.061267916791802989884 0.31588710938237474224 0.26548222985837804933 -0.11923826080195354393 0.055106371755766353493 0.22215548198260559598 0.43872048602317753607 0.33639255620769342725 0.47807917041281505766 0.60329005113463796128 -0.81423573229648216198 0.0015214793525862926882 -0.23595433231503393223 -0.9458228987076915395;0.79269062544126500658 0.019160251950257306541 0.21522150816303245446 -0.29499285317296031206 -0.067412995988950924486 1.1725568701921380566 -0.64020635737422759703 0.48448784759966573299 0.32725732845074345656 -0.00025819194028772057825 -0.77701342357496272495 -0.45977240775855426902 -0.40175751839071727201 0.23585362103401386058 -0.21360242668758369633];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1);
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
